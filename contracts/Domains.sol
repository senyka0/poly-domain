// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Base64.sol";

contract Domains is ERC721URIStorage {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    address payable public owner;
    string public tld;

    string svgPartOne =
        '<svg width="270" height="270" viewBox="0 0 270 270" fill="none" xmlns="http://www.w3.org/2000/svg"><svg width="270" height="270" viewBox="0 0 270 270" xmlns="http://www.w3.org/2000/svg"><path fill="#484848" d="M1 0h270v270H1z"/><path d="M48.421 105.142c9.947-11.859 31.88-4.941 41.604 0m0 0 5.739-9.11m-5.739 9.11c0-7.902 35.095-29.713 78.906-46.076M95.764 96.032l28.215-44.794a1116.85 1116.85 0 0 1 7.651 3.345M95.764 96.032c-45.908 7.959-47.343 46.843-47.343 55.378 0 8.535 10.043 24.257 47.343 82.654 1.976 3.092 3.849 5.777 5.624 8.085m76.629-88.543a400.91 400.91 0 0 1-15.781-2.196c-7.718-1.218-14.546-2.015-20.564-2.438m36.345 4.634c9.086-15.773 1.912-39.929-9.086-65.533-57.067-17.22-130.266-54.444 33.474-65.584C407.08 8.564 90.025-7.16 74.245 5.869 58.462 18.894 123.45 41.85 172.68 78.638m5.337 74.967c48.401 5.677 50.026-5.516 42.135-18.816m-24.442 91.637a898.385 898.385 0 0 1 13.157-21.112m-13.157 21.112c-7.676-4.312-23.644-16.29-26.099-29.697m26.099 29.697c-38.394 0-120.37.454-159.723-11.368M141.672 88.073c-9.743-25.378-27.281-3.749-67.427-15.403m67.427 15.403c3.381 8.804 8.624 16.455 12.887 23.358m-12.887-23.358c-.83-1.815-2.202 6.748-3.094 21.03m3.094 39.869c-7.185-.505-13.215-.478-18.222 0m18.222 0c26.526-11.716 21.892-22.959 12.887-37.541M95.764 151.41c18.19-10.857 29.419-28.773 35.625-46.268m.241-50.56c7.011-1.777 9.217 23.901-.241 50.56m.241-50.56c3.168 1.399 6.55 2.907 10.042 4.484m-93.251 10.14c0 7.812-.113 14.756 0 20.964m75.029 58.802c-45.481 24.963-20.991-2.099-49.206-14.182-22.08-9.457-25.416-22.27-25.823-44.62m75.029 58.802c-4.659.445-8.432 1.279-11.428 2.438M236.359 22.489c5.898 1.68 11.859 11.094-11.478 35.311m0 0c47.751 18.364-4.705 41.295 11.478 66.209 3.949 6.081 6.34 10.916 7.211 15.509M224.881 57.8c-5.872-2.258-13.259-4.447-22.476-6.562C118.24 31.922 71.853 9.013 48.421 30.125 24.989 51.238 16.859 50.34 64.202 69.206a109.834 109.834 0 0 0 10.043 3.464m57.144 32.472c-36.605 24.011-55.191 30.931-67.187 34.376m67.187-34.376c2.895 1.855 5.26 3.135 7.189 3.961M14.946 193.635c43.518 11.68 54.995 11.68 90.861 11.68m-90.86-11.68c-27.582-7.402-5.74-21.495-5.74-21.495m5.74 21.495c-3.95 9.754 5.007 16.608 21.04 21.424m69.82-9.744c8.845.01 15.796 3.138 89.903 3.884m-89.903-3.884c25.376 0 50.991 4.722 63.804-8.585M141.672 59.066c24.586 11.1 54.644 25.596 54.038 29.007-.956 5.39 13.39 5.39 6.695 17.069-2.036 3.553 3.979 10.886 10.134 18.867m-70.867-64.943c18.919.667 27.992 8.701 31.008 19.573m-98.436-5.97c-10.042 38.244 10.043 89.073 15.781 96.709 2.065 2.748 1.95 5.515 2.763 8.535m30.662 19.842a165.143 165.143 0 0 0 8.18 7.56c.041 2.516.03 5.162-.043 7.866m-8.137-15.426c-24.832-8.291-29.216-14.467-30.662-19.842m30.662 19.842c-17.084-16.908-31.211-38.692-11.428-46.345m96.845 53.905c25.45-39.612 37.411-51.53 34.703-65.797m-34.703 65.797c.997-2.596 2.256-5.105 3.672-7.551m7.613-62.974c-2.098-3.537-4.869-7.224-7.613-10.781m7.613 10.781c7.013 6.889 10.661 13.074 12.012 18.816m-157.92-84.4c-10.042 0-29.672-18.265-25.823 20.964m44.367 87.743c40.075 5.892 65.616 17.46 82.741 8.866m37.01-62.77c.743 3.818.77 7.364.202 10.781m-43.81-75.724c-20.564-4.483-47.343-24.898-63.124-16.363-15.782 8.535-41.605 5.19-41.605 8.535 0 3.345-9.564 15.87-7.651 27.401 1.913 11.531-23.911 41.582 7.651 60.879m104.729-80.452c1.249 6.524 8.355 26.132 26.779 52.365M64.202 139.518c-12.216 3.507-17.598 3.41-28.215 14.088-2.051 2.063-4.317 3.994-6.695 5.809m102.338 18.498c3.159 1.23 6.533 1.861 10.042 1.992m71.069-45.115c.143 7.591-24.956 31.779-50.505 41.268m50.505-41.268c-.624 3.758-1.969 7.36-3.874 10.995M172.68 78.639c2.702 9.74.544 21.755-3.749 32.792-.793 2.036-1.377 3.813-1.785 5.391m18.522-57.756c20.599 6.99 54.853 28.328 27.073 57.756-34.724 36.784 34.616 73.61-71.069 63.083m0 0c6.55.245 13.574-1.251 20.564-3.847m74.123-145.933c16.737 0 36.822-17.136 26.779 28.94m0 0c-10.042 46.077-19.051 50.592-19.568 80.453m19.568-80.452c0 46.076 11.478 23.735 5.739 75.724-5.739 51.989-8.794 43.61-7.266 61.94m-20.949-11.629c-2.219 4.4 14.38 7.846 20.949 11.629M92.788 209.358c15.116 1.857 27.905 3.083 38.799 3.823m64.123-3.982c8.75.088 18.436.143 29.171.156m-29.171-.156c-10.292 3.039-24.969 6.644-64.123 3.982m111.983-19.546c-7.211 14.69-23.418 40.429-23.418 40.429s-25.492-3.886-34.484-13.126m-23.432-44.88c1.434 5.843 3.885 13.184 7.375 20.672m0 0c2.487-2.583 4.491-5.844 5.918-9.951m-5.918 9.951c3.986 8.551 9.328 17.293 16.057 24.208m-149.68-71.966c59.752 33.328 65.761-18.51 66.773-32.15m0 0c.469-6.326-.136-4.437 3.046 17.968 10.042 70.72-61.121-25.156-3.046-17.968Zm51.798-5.391c-17.255-25.325 1.711 5.247-15.981-2.328m28.568 7.719c-4.271 16.515 10.871 11.142 10.871 52.556 0 7.04-.875 12.76-2.488 17.401m-8.383-69.957c25.217 27.401 28.564-11.996 28.564 17.968 0 29.963 26.313-28.321 13.157 10.995m0 0c-4.92 9.39-13.575 19.007-23.199 32.128-3.016 4.113-6.374 6.976-10.139 8.866m0 0C158.808 190.231 33.523-78.523 21.641 42.703c-9.008 91.913 15.303-15.35 7.652 53.329-7.652 68.679 6.694-49.167 6.694 20.79v52.556c0 35.937.957-59.539-6.695-9.963m0 0c-6.55 5.001 19.129 25.686-20.084 12.725m20.084-12.725c-6.695-55.644-20.084-5.809-7.65-42.593 12.433-36.785-6.696 92.377-12.434 55.318m26.78 42.919c86.531 31.246 242.093-27.965-14.347 27.09 126.823-14.266 126.405-15.27 153.888-19.645m10.139-1.566a1132.88 1132.88 0 0 0-10.139 1.566m-74.141 19.645c60.848-15.815 43.341-6.428 74.141-19.645m-74.141 19.645c22.724 29.542 29.475-2.511 30.199-28.968m93.294-3.826c1.572.002 3.166.003 4.783.003 35.439-5.222 38.118-9.074 31.947-12.628m-36.73 12.625c7.828-39.977 26.705-36.933 7.283-55.749m0 0c3.84 16.323-10.885 29.057-19.625 44.158m40.557 28.663c-167.499-171.844 48.996 46.717-20.932 35.038-69.928-11.679-46.496 8.535-46.496 8.535s-50.109-112.539-47.09-160.897m0 0c-16.029 14.906-23.535 13.024-26.556 42.307m19.565 61.771c44.687-4.255 80.952-4.432 80.952-15.417" stroke="#000"/><path d="M156.991 20V5.455h2.123v5.404h.128a5.93 5.93 0 0 1 .533-.788c.232-.298.554-.559.966-.781.412-.227.956-.341 1.633-.341.881 0 1.667.222 2.358.667.691.446 1.233 1.087 1.626 1.925.398.838.597 1.847.597 3.026 0 1.179-.196 2.19-.589 3.032-.393.838-.933 1.485-1.62 1.94-.686.45-1.47.674-2.351.674-.662 0-1.205-.111-1.626-.334-.417-.222-.743-.483-.98-.781a5.907 5.907 0 0 1-.547-.795h-.178V20h-2.073Zm2.081-5.454c0 .767.111 1.439.333 2.017.223.577.545 1.03.966 1.356.422.322.938.483 1.549.483.634 0 1.164-.168 1.59-.504.427-.341.749-.803.966-1.385.223-.583.334-1.238.334-1.968 0-.72-.109-1.365-.327-1.938-.213-.573-.535-1.026-.965-1.357-.427-.331-.959-.497-1.598-.497-.616 0-1.137.159-1.563.476-.421.317-.741.76-.959 1.328-.218.568-.326 1.23-.326 1.989Zm11.239 9.545a4.44 4.44 0 0 1-.867-.078 2.73 2.73 0 0 1-.582-.157l.511-1.74c.389.105.734.15 1.037.135.303-.014.571-.127.803-.34.237-.214.445-.562.625-1.045l.263-.724-3.992-11.051h2.273l2.763 8.466h.113l2.763-8.466h2.28l-4.496 12.365a4.925 4.925 0 0 1-.795 1.442 3.09 3.09 0 0 1-1.151.895c-.445.198-.961.298-1.548.298Zm11.385-3.956a1.38 1.38 0 0 1-1.002-.412 1.376 1.376 0 0 1-.419-1.008c0-.389.14-.72.419-.995.28-.28.614-.419 1.002-.419s.722.14 1.001.42c.28.274.419.605.419.994 0 .26-.066.499-.199.717a1.462 1.462 0 0 1-.511.511c-.213.128-.45.192-.71.192Zm0-7.94a1.37 1.37 0 0 1-1.002-.42 1.368 1.368 0 0 1-.419-1c0-.39.14-.72.419-.995a1.37 1.37 0 0 1 1.002-.42c.388 0 .722.14 1.001.42.28.275.419.606.419.994 0 .26-.066.5-.199.718a1.462 1.462 0 0 1-.511.51c-.213.129-.45.193-.71.193Zm17.732-.44-1.924.34a2.297 2.297 0 0 0-.384-.703 1.89 1.89 0 0 0-.696-.547c-.293-.142-.66-.213-1.101-.213-.601 0-1.103.135-1.505.405-.403.265-.604.608-.604 1.03 0 .364.135.658.405.88.27.223.705.405 1.307.547l1.733.398c1.003.232 1.751.59 2.244 1.072.492.483.739 1.11.739 1.883a2.86 2.86 0 0 1-.569 1.747c-.374.506-.897.904-1.569 1.193-.668.289-1.442.433-2.323.433-1.221 0-2.218-.26-2.99-.781-.772-.526-1.245-1.271-1.42-2.237l2.052-.313c.128.535.391.94.789 1.215.397.27.916.405 1.555.405.696 0 1.252-.145 1.669-.434.417-.293.625-.65.625-1.072 0-.341-.128-.628-.383-.86-.251-.232-.637-.407-1.158-.525l-1.847-.405c-1.018-.232-1.771-.601-2.258-1.108-.483-.507-.725-1.148-.725-1.925 0-.643.18-1.207.54-1.69.36-.483.857-.86 1.492-1.13.634-.274 1.361-.411 2.18-.411 1.179 0 2.107.256 2.784.767.677.507 1.125 1.186 1.342 2.038Zm7.25 8.465c-1.075 0-2-.23-2.777-.689a4.676 4.676 0 0 1-1.79-1.953c-.416-.843-.625-1.83-.625-2.961 0-1.118.209-2.103.625-2.955.422-.852 1.009-1.518 1.762-1.996.757-.478 1.643-.717 2.656-.717a5.35 5.35 0 0 1 1.79.305 4.336 4.336 0 0 1 1.555.96c.459.435.822 1 1.087 1.697.265.69.397 1.531.397 2.52v.754h-8.671v-1.591h6.591c0-.559-.114-1.054-.341-1.485a2.583 2.583 0 0 0-.959-1.03c-.407-.25-.886-.376-1.435-.376-.596 0-1.117.147-1.562.44a2.947 2.947 0 0 0-1.023 1.137 3.277 3.277 0 0 0-.355 1.513v1.243c0 .729.128 1.349.383 1.86.261.512.623.902 1.087 1.172.464.265 1.006.398 1.626.398.403 0 .77-.057 1.101-.17a2.38 2.38 0 0 0 .86-.526c.241-.232.426-.519.554-.86l2.01.363a3.637 3.637 0 0 1-.867 1.555 4.2 4.2 0 0 1-1.555 1.03c-.621.241-1.328.362-2.124.362Zm9.16-6.697V20h-2.123V9.09h2.038v1.777h.135a3.119 3.119 0 0 1 1.179-1.393c.54-.35 1.219-.525 2.038-.525.744 0 1.395.156 1.953.469.559.307.992.767 1.3 1.378.308.61.462 1.366.462 2.265V20h-2.124v-6.683c0-.791-.206-1.409-.618-1.854-.412-.45-.977-.675-1.697-.675-.493 0-.931.107-1.314.32-.379.213-.68.525-.902.938-.218.407-.327.9-.327 1.477Zm10.781 10.568a4.43 4.43 0 0 1-.866-.078c-.26-.048-.455-.1-.582-.157l.511-1.74c.388.105.734.15 1.037.135a1.24 1.24 0 0 0 .802-.34c.237-.214.446-.562.625-1.045l.263-.724-3.991-11.051h2.273l2.762 8.466h.114l2.763-8.466h2.28l-4.496 12.365a4.95 4.95 0 0 1-.796 1.442 3.086 3.086 0 0 1-1.15.895c-.445.198-.961.298-1.549.298Zm11.939-7.791-.014-2.593h.37l4.346-4.616h2.543l-4.958 5.256h-.333l-1.954 1.953Zm-1.953 3.7V5.455h2.124V20h-2.124Zm6.889 0-3.906-5.185 1.463-1.484 5.05 6.669h-2.607Zm7.419.241c-.691 0-1.316-.127-1.875-.383a3.153 3.153 0 0 1-1.328-1.13c-.322-.492-.483-1.095-.483-1.81 0-.616.118-1.122.355-1.52a2.62 2.62 0 0 1 .959-.945 4.999 4.999 0 0 1 1.349-.525 13.397 13.397 0 0 1 1.52-.27l1.591-.185c.407-.052.703-.135.888-.249.184-.113.277-.298.277-.553v-.05c0-.62-.176-1.101-.526-1.442-.346-.34-.862-.511-1.548-.511-.715 0-1.279.158-1.691.476-.407.312-.688.66-.845 1.043l-1.995-.454c.236-.663.582-1.198 1.036-1.605a4.22 4.22 0 0 1 1.584-.895 6.185 6.185 0 0 1 1.882-.284c.436 0 .898.052 1.385.156.493.1.952.284 1.378.554.431.27.784.656 1.058 1.158.275.497.412 1.143.412 1.939V20h-2.074v-1.491h-.085a3.01 3.01 0 0 1-.618.81 3.274 3.274 0 0 1-1.058.66c-.431.175-.947.262-1.548.262Zm.461-1.704c.588 0 1.089-.116 1.506-.348a2.43 2.43 0 0 0 .959-.91 2.36 2.36 0 0 0 .334-1.214V14.66c-.076.076-.223.147-.441.213a6.814 6.814 0 0 1-.731.164l-.803.12-.653.085c-.412.053-.788.14-1.129.263-.337.123-.606.3-.81.533-.199.227-.298.53-.298.909 0 .526.194.923.582 1.193.388.265.883.398 1.484.398Zm12.786 1.704c-1.122-.004-2.081-.3-2.876-.887-.796-.587-1.404-1.442-1.825-2.564-.422-1.122-.632-2.474-.632-4.056 0-1.576.21-2.923.632-4.04.426-1.118 1.037-1.97 1.832-2.558.8-.587 1.757-.88 2.869-.88 1.113 0 2.067.296 2.863.887.795.588 1.403 1.44 1.825 2.557.426 1.113.639 2.458.639 4.034 0 1.586-.211 2.94-.632 4.063-.421 1.117-1.03 1.972-1.825 2.564-.796.587-1.752.88-2.87.88Zm0-1.896c.985 0 1.755-.48 2.309-1.442.558-.96.838-2.35.838-4.169 0-1.207-.128-2.227-.384-3.06-.251-.839-.613-1.473-1.087-1.904a2.376 2.376 0 0 0-1.676-.654c-.98 0-1.749.483-2.308 1.45-.559.965-.84 2.355-.845 4.168 0 1.213.125 2.238.376 3.076.256.833.618 1.465 1.087 1.896.469.426 1.032.64 1.69.64Z" fill="#fff"/></svg><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" style="fill:#fff;font-family:extra-bold;font-size:30px">';
    string svgPartTwo = "</text></svg>";

    mapping(string => address) public domains;
    mapping(string => string) public records;
    mapping(uint => string) public names;

    constructor(string memory _tld) payable ERC721("Polygon ENS", "PGN") {
        owner = payable(msg.sender);
        tld = _tld;
    }

    modifier onlyOwner() {
        require(isOwner());
        _;
    }

    function isOwner() public view returns (bool) {
        return msg.sender == owner;
    }

    function withdraw() public onlyOwner {
        uint amount = address(this).balance;

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Failed to withdraw Matic");
    }

    function price(string calldata name) public pure returns (uint) {
        uint len = bytes(name).length;
        require(len > 0);
        if (len < 4) {
            return 0.1 ether;
        } else if (len < 7) {
            return 0.05 ether;
        } else {
            return 0.01 ether;
        }
    }

    function valid(string calldata name) public pure returns (bool) {
        return bytes(name).length >= 3 && bytes(name).length <= 10;
    }

    function register(string calldata name) public payable {
        require(valid(name), "domain is not valid");
        require(domains[name] == address(0));
        uint _price = price(name);
        require(msg.value >= _price, "Not enough Matic paid");
        string memory _name = string(abi.encodePacked(name, ".", tld));
        string memory finalSvg = string(
            abi.encodePacked(svgPartOne, _name, svgPartTwo)
        );
        uint256 newRecordId = _tokenIds.current();
        uint256 length = bytes(name).length;
        string memory strLen = Strings.toString(length);
        string memory json = Base64.encode(
            abi.encodePacked(
                '{"name": "',
                _name,
                '", "description": "A domain on the Polygon name service", "image": "data:image/svg+xml;base64,',
                Base64.encode(bytes(finalSvg)),
                '","length":"',
                strLen,
                '"}'
            )
        );
        string memory finalTokenUri = string(
            abi.encodePacked("data:application/json;base64,", json)
        );
        _safeMint(msg.sender, newRecordId);
        _setTokenURI(newRecordId, finalTokenUri);
        domains[name] = msg.sender;
        names[newRecordId] = name;
        _tokenIds.increment();
    }

    function getAddress(string calldata name) public view returns (address) {
        return domains[name];
    }

    function setRecord(string calldata name, string calldata record) public {
        require(domains[name] == msg.sender);
        records[name] = record;
    }

    function getRecord(string calldata name)
        public
        view
        returns (string memory)
    {
        return records[name];
    }

    function getAllNames() public view returns (string[] memory) {
        string[] memory allNames = new string[](_tokenIds.current());
        for (uint i = 0; i < _tokenIds.current(); i++) {
            allNames[i] = names[i];
        }
        return allNames;
    }
}
